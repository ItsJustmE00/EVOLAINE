import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
import { Product } from '../types/product';
import { useTrackCart } from '../hooks/useTrackCart';

export type CartItem = {
  id: number;
  name: string;
  description: string;
  price: string;
  image: string;
  quantity: number;
  category?: string;
};

type CartContextType = {
  cart: CartItem[];
  addToCart: (product: Product) => void;
  removeFromCart: (productId: number) => void;
  updateQuantity: (productId: number, quantity: number) => void;
  clearCart: () => void;
  cartTotal: number;
  itemCount: number;
};

const CartContext = createContext<CartContextType | undefined>(undefined);

const CART_STORAGE_KEY = 'evolaine_cart';

export const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const { trackProductAdded } = useTrackCart();
  
  const [cart, setCart] = useState<CartItem[]>(() => {
    // Récupérer le panier depuis le localStorage au chargement
    if (typeof window !== 'undefined') {
      const savedCart = localStorage.getItem(CART_STORAGE_KEY);
      return savedCart ? JSON.parse(savedCart) : [];
    }
    return [];
  });

  // Sauvegarder le panier dans le localStorage à chaque modification
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));
    }
  }, [cart]);

  const addToCart = useCallback((product: Product) => {
    console.log('addToCart appelé avec le produit:', product);
    
    // Suivi de l'ajout au panier avec Meta Pixel
    const price = parseFloat(product.price.toString().replace(/[^0-9.,]/g, '').replace(',', '.')) || 0;
    
    console.log('Prix formaté:', price);
    
    try {
      trackProductAdded({
        id: product.id,
        name: product.name,
        price: price,
        quantity: 1,
        category: product.category,
        currency: 'MAD'
      });
      console.log('Suivi Meta Pixel effectué');
    } catch (error) {
      console.error('Erreur lors du suivi Meta Pixel:', error);
    }

    setCart((prevCart: CartItem[]) => {
      console.log('Ancien panier:', prevCart);
      const existingItem = prevCart.find(item => item.id === product.id);
      
      let newCart: CartItem[];
      
      if (existingItem) {
        console.log('Produit existant trouvé, mise à jour de la quantité');
        newCart = prevCart.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        console.log('Nouveau produit, ajout au panier');
        newCart = [...prevCart, { 
          id: product.id,
          name: product.name,
          description: product.description,
          price: product.price,
          image: product.image,
          quantity: 1 
        }];
      }
      
      console.log('Nouveau panier après ajout:', newCart);
      return newCart;
    });
  }, [trackProductAdded]);

  const removeFromCart = useCallback((productId: number) => {
    try {
      console.log('Tentative de suppression du produit ID:', productId);
      setCart((prevCart: CartItem[]) => {
        const newCart = prevCart.filter(item => item.id !== productId);
        console.log('Nouveau panier après suppression:', newCart);
        return newCart;
      });
    } catch (error) {
      console.error('Erreur lors de la suppression du produit:', error);
    }
  }, []);

  const updateQuantity = useCallback((productId: number, quantity: number) => {
    if (quantity < 1) {
      removeFromCart(productId);
      return;
    }
    
    setCart((prevCart: CartItem[]) => 
      prevCart.map(item =>
        item.id === productId ? { ...item, quantity } : item
      )
    );
  }, [removeFromCart]);

  const clearCart = useCallback(() => {
    setCart([]);
  }, []);

  // Calculer le total du panier
  const cartTotal = cart.reduce((total, item) => {
    const price = parseFloat(item.price.toString().replace(/[^0-9.,]/g, '').replace(',', '.')) || 0;
    return total + (price * item.quantity);
  }, 0);

  // Compter le nombre total d'articles dans le panier
  const itemCount = cart.reduce((count, item) => count + item.quantity, 0);

  const value = {
    cart,
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    cartTotal,
    itemCount,
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = (): CartContextType => {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

export default CartContext;
